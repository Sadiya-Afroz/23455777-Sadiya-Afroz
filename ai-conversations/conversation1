tool: Chatgpt
Date: 19.10 2025
me: How can I fetch live weather data in Python for my WeatherWise app?
AI: Fetch Live Weather in Python (Example with OpenWeatherMap)

Get an API key: https://openweathermap.org/api

Install dependency:

pip install requests


Code:

import requests

API_KEY = "your_api_key"
CITY = "London"
URL = f"https://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={API_KEY}&units=metric"

res = requests.get(URL).json()
print(f"{CITY}: {res['weather'][0]['description']}, {res['main']['temp']}Â°C")


me: Whatâ€™s the easiest way to connect to the wttr.in API and get JSON results?
AI: The easiest way to get weather data from wttr.in as JSON is with a simple HTTP request â€” no API key needed!

Hereâ€™s how ðŸ‘‡

import requests

city = "London"
url = f"https://wttr.in/{city}?format=j1"  # ?format=j1 gives JSON output

response = requests.get(url)
data = response.json()

current = data["current_condition"][0]
print(f"{city}: {current['temp_C']}Â°C, {current['weatherDesc'][0]['value']}")


âœ… Notes:

?format=j1 â†’ returns full JSON data (current + forecast).

Works for any location: city name, ZIP, or lat/lon.

No authentication or setup needed.

Would you like a version that handles errors or missing cities gracefully?


me: What should I do if the API returns an error or no data?
AI:
Hereâ€™s how you can safely handle errors or missing data from wttr.in:

import requests

def get_weather(city):
    url = f"https://wttr.in/{city}?format=j1"
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()  # raises for 4xx/5xx
        data = response.json()

        if "current_condition" in data and data["current_condition"]:
            current = data["current_condition"][0]
            print(f"{city}: {current['temp_C']}Â°C, {current['weatherDesc'][0]['value']}")
        else:
            print(f"No weather data found for '{city}'.")
    except requests.exceptions.RequestException as e:
        print(f"Error fetching data: {e}")

get_weather("London")

âœ… Tips:

raise_for_status() catches HTTP errors (e.g. 404 or 500).

Use timeout to avoid hanging requests.

Always check if current_condition exists before accessing it.
